#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OrganicFarm")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertStateMaster(StateMaster instance);
  partial void UpdateStateMaster(StateMaster instance);
  partial void DeleteStateMaster(StateMaster instance);
  partial void InsertCityMaster(CityMaster instance);
  partial void UpdateCityMaster(CityMaster instance);
  partial void DeleteCityMaster(CityMaster instance);
  partial void InsertAreaMaster(AreaMaster instance);
  partial void UpdateAreaMaster(AreaMaster instance);
  partial void DeleteAreaMaster(AreaMaster instance);
  partial void InsertCategoryDetail(CategoryDetail instance);
  partial void UpdateCategoryDetail(CategoryDetail instance);
  partial void DeleteCategoryDetail(CategoryDetail instance);
  partial void InsertSubCategoryDetail(SubCategoryDetail instance);
  partial void UpdateSubCategoryDetail(SubCategoryDetail instance);
  partial void DeleteSubCategoryDetail(SubCategoryDetail instance);
  partial void InsertSoilTypeDetail(SoilTypeDetail instance);
  partial void UpdateSoilTypeDetail(SoilTypeDetail instance);
  partial void DeleteSoilTypeDetail(SoilTypeDetail instance);
  partial void InsertCropTypeDetail(CropTypeDetail instance);
  partial void UpdateCropTypeDetail(CropTypeDetail instance);
  partial void DeleteCropTypeDetail(CropTypeDetail instance);
  partial void InsertProductDetail(ProductDetail instance);
  partial void UpdateProductDetail(ProductDetail instance);
  partial void DeleteProductDetail(ProductDetail instance);
  partial void InsertFarmDetail(FarmDetail instance);
  partial void UpdateFarmDetail(FarmDetail instance);
  partial void DeleteFarmDetail(FarmDetail instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["OrganicFarmConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<StateMaster> StateMasters
	{
		get
		{
			return this.GetTable<StateMaster>();
		}
	}
	
	public System.Data.Linq.Table<CityMaster> CityMasters
	{
		get
		{
			return this.GetTable<CityMaster>();
		}
	}
	
	public System.Data.Linq.Table<AreaMaster> AreaMasters
	{
		get
		{
			return this.GetTable<AreaMaster>();
		}
	}
	
	public System.Data.Linq.Table<CategoryDetail> CategoryDetails
	{
		get
		{
			return this.GetTable<CategoryDetail>();
		}
	}
	
	public System.Data.Linq.Table<SubCategoryDetail> SubCategoryDetails
	{
		get
		{
			return this.GetTable<SubCategoryDetail>();
		}
	}
	
	public System.Data.Linq.Table<SoilTypeDetail> SoilTypeDetails
	{
		get
		{
			return this.GetTable<SoilTypeDetail>();
		}
	}
	
	public System.Data.Linq.Table<CropTypeDetail> CropTypeDetails
	{
		get
		{
			return this.GetTable<CropTypeDetail>();
		}
	}
	
	public System.Data.Linq.Table<ProductDetail> ProductDetails
	{
		get
		{
			return this.GetTable<ProductDetail>();
		}
	}
	
	public System.Data.Linq.Table<FarmDetail> FarmDetails
	{
		get
		{
			return this.GetTable<FarmDetail>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StateMaster")]
public partial class StateMaster : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _StateId;
	
	private string _StateName;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    #endregion
	
	public StateMaster()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int StateId
	{
		get
		{
			return this._StateId;
		}
		set
		{
			if ((this._StateId != value))
			{
				this.OnStateIdChanging(value);
				this.SendPropertyChanging();
				this._StateId = value;
				this.SendPropertyChanged("StateId");
				this.OnStateIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(50)")]
	public string StateName
	{
		get
		{
			return this._StateName;
		}
		set
		{
			if ((this._StateName != value))
			{
				this.OnStateNameChanging(value);
				this.SendPropertyChanging();
				this._StateName = value;
				this.SendPropertyChanged("StateName");
				this.OnStateNameChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityMaster")]
public partial class CityMaster : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CityId;
	
	private string _CityName;
	
	private System.Nullable<int> _StateId;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    #endregion
	
	public CityMaster()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CityId
	{
		get
		{
			return this._CityId;
		}
		set
		{
			if ((this._CityId != value))
			{
				this.OnCityIdChanging(value);
				this.SendPropertyChanging();
				this._CityId = value;
				this.SendPropertyChanged("CityId");
				this.OnCityIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="NVarChar(50)")]
	public string CityName
	{
		get
		{
			return this._CityName;
		}
		set
		{
			if ((this._CityName != value))
			{
				this.OnCityNameChanging(value);
				this.SendPropertyChanging();
				this._CityName = value;
				this.SendPropertyChanged("CityName");
				this.OnCityNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
	public System.Nullable<int> StateId
	{
		get
		{
			return this._StateId;
		}
		set
		{
			if ((this._StateId != value))
			{
				this.OnStateIdChanging(value);
				this.SendPropertyChanging();
				this._StateId = value;
				this.SendPropertyChanged("StateId");
				this.OnStateIdChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AreaMaster")]
public partial class AreaMaster : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AreaId;
	
	private string _AreaName;
	
	private System.Nullable<int> _CityId;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaIdChanging(int value);
    partial void OnAreaIdChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    #endregion
	
	public AreaMaster()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AreaId
	{
		get
		{
			return this._AreaId;
		}
		set
		{
			if ((this._AreaId != value))
			{
				this.OnAreaIdChanging(value);
				this.SendPropertyChanging();
				this._AreaId = value;
				this.SendPropertyChanged("AreaId");
				this.OnAreaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaName", DbType="NVarChar(50)")]
	public string AreaName
	{
		get
		{
			return this._AreaName;
		}
		set
		{
			if ((this._AreaName != value))
			{
				this.OnAreaNameChanging(value);
				this.SendPropertyChanging();
				this._AreaName = value;
				this.SendPropertyChanged("AreaName");
				this.OnAreaNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
	public System.Nullable<int> CityId
	{
		get
		{
			return this._CityId;
		}
		set
		{
			if ((this._CityId != value))
			{
				this.OnCityIdChanging(value);
				this.SendPropertyChanging();
				this._CityId = value;
				this.SendPropertyChanged("CityId");
				this.OnCityIdChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryDetail")]
public partial class CategoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CategoryID;
	
	private string _CategoryName;
	
	private System.Nullable<int> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public CategoryDetail()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CategoryID
	{
		get
		{
			return this._CategoryID;
		}
		set
		{
			if ((this._CategoryID != value))
			{
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(50)")]
	public string CategoryName
	{
		get
		{
			return this._CategoryName;
		}
		set
		{
			if ((this._CategoryName != value))
			{
				this.OnCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._CategoryName = value;
				this.SendPropertyChanged("CategoryName");
				this.OnCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int")]
	public System.Nullable<int> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategoryDetail")]
public partial class SubCategoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SubCategoryID;
	
	private string _SubCategoryName;
	
	private System.Nullable<int> _CategoryID;
	
	private System.Nullable<int> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategoryIDChanging(int value);
    partial void OnSubCategoryIDChanged();
    partial void OnSubCategoryNameChanging(string value);
    partial void OnSubCategoryNameChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public SubCategoryDetail()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SubCategoryID
	{
		get
		{
			return this._SubCategoryID;
		}
		set
		{
			if ((this._SubCategoryID != value))
			{
				this.OnSubCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._SubCategoryID = value;
				this.SendPropertyChanged("SubCategoryID");
				this.OnSubCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryName", DbType="NVarChar(50)")]
	public string SubCategoryName
	{
		get
		{
			return this._SubCategoryName;
		}
		set
		{
			if ((this._SubCategoryName != value))
			{
				this.OnSubCategoryNameChanging(value);
				this.SendPropertyChanging();
				this._SubCategoryName = value;
				this.SendPropertyChanged("SubCategoryName");
				this.OnSubCategoryNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
	public System.Nullable<int> CategoryID
	{
		get
		{
			return this._CategoryID;
		}
		set
		{
			if ((this._CategoryID != value))
			{
				this.OnCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._CategoryID = value;
				this.SendPropertyChanged("CategoryID");
				this.OnCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int")]
	public System.Nullable<int> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SoilTypeDetail")]
public partial class SoilTypeDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SoilTypeID;
	
	private string _SoilTypeName;
	
	private string _Image;
	
	private System.Nullable<int> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSoilTypeIDChanging(int value);
    partial void OnSoilTypeIDChanged();
    partial void OnSoilTypeNameChanging(string value);
    partial void OnSoilTypeNameChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public SoilTypeDetail()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoilTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SoilTypeID
	{
		get
		{
			return this._SoilTypeID;
		}
		set
		{
			if ((this._SoilTypeID != value))
			{
				this.OnSoilTypeIDChanging(value);
				this.SendPropertyChanging();
				this._SoilTypeID = value;
				this.SendPropertyChanged("SoilTypeID");
				this.OnSoilTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoilTypeName", DbType="NVarChar(50)")]
	public string SoilTypeName
	{
		get
		{
			return this._SoilTypeName;
		}
		set
		{
			if ((this._SoilTypeName != value))
			{
				this.OnSoilTypeNameChanging(value);
				this.SendPropertyChanging();
				this._SoilTypeName = value;
				this.SendPropertyChanged("SoilTypeName");
				this.OnSoilTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int")]
	public System.Nullable<int> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CropTypeDetail")]
public partial class CropTypeDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CropTypeID;
	
	private string _CropTypeName;
	
	private System.Nullable<int> _SoilTypeID;
	
	private string _Image;
	
	private System.Nullable<int> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCropTypeIDChanging(int value);
    partial void OnCropTypeIDChanged();
    partial void OnCropTypeNameChanging(string value);
    partial void OnCropTypeNameChanged();
    partial void OnSoilTypeIDChanging(System.Nullable<int> value);
    partial void OnSoilTypeIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public CropTypeDetail()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CropTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CropTypeID
	{
		get
		{
			return this._CropTypeID;
		}
		set
		{
			if ((this._CropTypeID != value))
			{
				this.OnCropTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CropTypeID = value;
				this.SendPropertyChanged("CropTypeID");
				this.OnCropTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CropTypeName", DbType="NVarChar(50)")]
	public string CropTypeName
	{
		get
		{
			return this._CropTypeName;
		}
		set
		{
			if ((this._CropTypeName != value))
			{
				this.OnCropTypeNameChanging(value);
				this.SendPropertyChanging();
				this._CropTypeName = value;
				this.SendPropertyChanged("CropTypeName");
				this.OnCropTypeNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoilTypeID", DbType="Int")]
	public System.Nullable<int> SoilTypeID
	{
		get
		{
			return this._SoilTypeID;
		}
		set
		{
			if ((this._SoilTypeID != value))
			{
				this.OnSoilTypeIDChanging(value);
				this.SendPropertyChanging();
				this._SoilTypeID = value;
				this.SendPropertyChanged("SoilTypeID");
				this.OnSoilTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int")]
	public System.Nullable<int> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductDetail")]
public partial class ProductDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ProductID;
	
	private string _ProductName;
	
	private System.Nullable<int> _SubCategoryID;
	
	private string _Price;
	
	private string _Description;
	
	private string _Image;
	
	private System.Nullable<int> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnSubCategoryIDChanging(System.Nullable<int> value);
    partial void OnSubCategoryIDChanged();
    partial void OnPriceChanging(string value);
    partial void OnPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public ProductDetail()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ProductID
	{
		get
		{
			return this._ProductID;
		}
		set
		{
			if ((this._ProductID != value))
			{
				this.OnProductIDChanging(value);
				this.SendPropertyChanging();
				this._ProductID = value;
				this.SendPropertyChanged("ProductID");
				this.OnProductIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(50)")]
	public string ProductName
	{
		get
		{
			return this._ProductName;
		}
		set
		{
			if ((this._ProductName != value))
			{
				this.OnProductNameChanging(value);
				this.SendPropertyChanging();
				this._ProductName = value;
				this.SendPropertyChanged("ProductName");
				this.OnProductNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryID", DbType="Int")]
	public System.Nullable<int> SubCategoryID
	{
		get
		{
			return this._SubCategoryID;
		}
		set
		{
			if ((this._SubCategoryID != value))
			{
				this.OnSubCategoryIDChanging(value);
				this.SendPropertyChanging();
				this._SubCategoryID = value;
				this.SendPropertyChanged("SubCategoryID");
				this.OnSubCategoryIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="NVarChar(50)")]
	public string Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int")]
	public System.Nullable<int> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FarmDetail")]
public partial class FarmDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FarmID;
	
	private string _FarmName;
	
	private System.Nullable<int> _SoilTypeID;
	
	private string _SizeOfFarm;
	
	private System.Nullable<int> _Price;
	
	private System.Nullable<int> _AreaId;
	
	private string _Description;
	
	private string _AgeOfProperty;
	
	private string _Image;
	
	private System.Nullable<int> _IsActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFarmIDChanging(int value);
    partial void OnFarmIDChanged();
    partial void OnFarmNameChanging(string value);
    partial void OnFarmNameChanged();
    partial void OnSoilTypeIDChanging(System.Nullable<int> value);
    partial void OnSoilTypeIDChanged();
    partial void OnSizeOfFarmChanging(string value);
    partial void OnSizeOfFarmChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnAreaIdChanging(System.Nullable<int> value);
    partial void OnAreaIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAgeOfPropertyChanging(string value);
    partial void OnAgeOfPropertyChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIsActiveChanging(System.Nullable<int> value);
    partial void OnIsActiveChanged();
    #endregion
	
	public FarmDetail()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FarmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FarmID
	{
		get
		{
			return this._FarmID;
		}
		set
		{
			if ((this._FarmID != value))
			{
				this.OnFarmIDChanging(value);
				this.SendPropertyChanging();
				this._FarmID = value;
				this.SendPropertyChanged("FarmID");
				this.OnFarmIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FarmName", DbType="NVarChar(50)")]
	public string FarmName
	{
		get
		{
			return this._FarmName;
		}
		set
		{
			if ((this._FarmName != value))
			{
				this.OnFarmNameChanging(value);
				this.SendPropertyChanging();
				this._FarmName = value;
				this.SendPropertyChanged("FarmName");
				this.OnFarmNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoilTypeID", DbType="Int")]
	public System.Nullable<int> SoilTypeID
	{
		get
		{
			return this._SoilTypeID;
		}
		set
		{
			if ((this._SoilTypeID != value))
			{
				this.OnSoilTypeIDChanging(value);
				this.SendPropertyChanging();
				this._SoilTypeID = value;
				this.SendPropertyChanged("SoilTypeID");
				this.OnSoilTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeOfFarm", DbType="NVarChar(20)")]
	public string SizeOfFarm
	{
		get
		{
			return this._SizeOfFarm;
		}
		set
		{
			if ((this._SizeOfFarm != value))
			{
				this.OnSizeOfFarmChanging(value);
				this.SendPropertyChanging();
				this._SizeOfFarm = value;
				this.SendPropertyChanged("SizeOfFarm");
				this.OnSizeOfFarmChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
	public System.Nullable<int> Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaId", DbType="Int")]
	public System.Nullable<int> AreaId
	{
		get
		{
			return this._AreaId;
		}
		set
		{
			if ((this._AreaId != value))
			{
				this.OnAreaIdChanging(value);
				this.SendPropertyChanging();
				this._AreaId = value;
				this.SendPropertyChanged("AreaId");
				this.OnAreaIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeOfProperty", DbType="NVarChar(20)")]
	public string AgeOfProperty
	{
		get
		{
			return this._AgeOfProperty;
		}
		set
		{
			if ((this._AgeOfProperty != value))
			{
				this.OnAgeOfPropertyChanging(value);
				this.SendPropertyChanging();
				this._AgeOfProperty = value;
				this.SendPropertyChanged("AgeOfProperty");
				this.OnAgeOfPropertyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(50)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Int")]
	public System.Nullable<int> IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
